linux_task:
  container:
    image: node:lts-slim
  test_script:
    - apt-get update
    - export DEBIAN_FRONTEND="noninteractive"
    - apt-get install -y
                rpm
                build-essential
                git
                libsecret-1-dev
                fakeroot
                libx11-dev
                libxkbfile-dev
                libgdk-pixbuf2.0-dev
                libgtk-3-dev
                libxss-dev
                libasound2-dev
                libnss3
                xvfb
    - yarn install || sleep 1 && yarn install || sleep 2 && yarn install || sleep 2 && yarn install || sleep 2 && yarn install || sleep 2 && yarn install
    - yarn run build
    - yarn run build:apm
    - Xvfb :99 & DISPLAY=:99 PLAYWRIGHT_JUNIT_OUTPUT_NAME=report.xml npx playwright test --reporter=junit,list
  junit_artifacts:
    path: report.xml
    type: text/xml
    format: junit
  videos_artifacts:
    path: ./tests/videos/**
  build_binary_script: yarn dist
  binary_artifacts:
    path: ./binaries/*

mac_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-base:latest
  test_script:
    - echo A | softwareupdate --install-rosetta
    - brew install node@16 yarn git python
    - ln -s /opt/homebrew/bin/python3 /opt/homebrew/bin/python
    - export PATH="/opt/homebrew/bin:/opt/homebrew/opt/node@16/bin:$PATH"
    - yarn install || sleep 1 && yarn install || sleep 2 && yarn install || sleep 2 && yarn install || sleep 2 && yarn install || sleep 2 && yarn install
    - yarn run build
    - yarn run build:apm
    - Xvfb :99 & DISPLAY=:99 PLAYWRIGHT_JUNIT_OUTPUT_NAME=report.xml npx playwright test --reporter=junit,list
  junit_artifacts:
    path: report.xml
    type: text/xml
    format: junit
  videos_artifacts:
    path: ./tests/videos/**
  build_arm_binary_script:
    - export PATH="/opt/homebrew/bin:/opt/homebrew/opt/node@16/bin:$PATH"
    - yarn dist
  binary_artifacts:
    path: ./binaries/*
  build_x86_binary_script:
    - arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    - export PATH="/usr/local/bin:$PATH"
    - arch -x86_64 brew install node@16 yarn git python
    - ln -s /usr/local/opt/python3 /usr/local/bin/python
    - export PATH="/usr/local/opt/node@16/bin:/usr/local/bin/python3:$PATH"
    - arch -x86_64 yarn run build
    - arch -x86_64 yarn run build:apm
    - sudo rm -rf /Library/Developer/CommandLineTools
    - arch -x86_64 xcode-select --install
    - arch -x86_64 yarn dist || arch -x86_64 yarn dist
  binary_artifacts:
    path: ./binaries/*

windows_task:
  windows_container:
    image: cirrusci/windowsservercore:visualstudio2019-2021.12.07
  env:
    CIRRUS_SHELL: bash
    PATH: C:\Python310\Scripts\;C:\Python310\;%PATH%;C:\Program Files\nodejs\;C:\Program Files\Git\cmd;C:\Users\User\AppData\Local\Microsoft\WindowsApps;C:\Users\User\AppData\Roaming\npm;C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\
  install_deps_script:
    - choco install nodejs --version=16.15.1 -y
    - choco install python git visualstudio2019-workload-vctools -y
    - npm config set python 'C:\Python310\python.exe'
  build_apm_script:
    - cd apm; npx yarn install || npx yarn install
    - ./node_modules/atom-package-manager/bin/npm rebuild || ./node_modules/atom-package-manager/bin/npm rebuild
  test_script:
    - npx yarn install || npx yarn install || npx yarn install || npx yarn install
    - npx yarn run build
    - npx playwright test ----reporter=list
  videos_artifacts:
    path: tests\videos\**
  build_binary_script:
    - npx yarn dist
  binary_artifacts:
    path: .\binaries\*
